/* The following code was generated by JFlex 1.6.0 */

//not finished yet

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>src/Lexer.lex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\21\1\22\1\23\1\21\22\0\1\1\1\50\1\17"+
    "\1\20\2\4\1\51\1\7\1\61\1\62\1\57\1\55\1\67\1\56"+
    "\1\12\1\16\1\3\11\5\1\45\1\70\1\54\1\52\1\53\2\0"+
    "\5\2\1\11\2\2\1\13\2\2\1\15\1\2\1\14\5\2\1\10"+
    "\6\2\1\65\1\0\1\66\1\60\1\6\1\4\1\27\1\31\1\25"+
    "\1\41\1\43\1\37\1\2\1\26\1\34\2\2\1\33\1\71\1\35"+
    "\1\32\1\40\1\44\1\30\1\42\1\36\1\47\1\2\1\46\3\2"+
    "\1\63\1\24\1\64\1\4\6\0\1\22\u1fa2\0\1\22\1\22\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\1\1\1\5\1\6"+
    "\1\3\1\7\3\1\15\3\1\10\1\3\1\11\1\1"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\3"+
    "\3\0\1\3\2\0\1\31\1\0\1\2\1\32\5\3"+
    "\1\33\1\3\1\34\1\35\5\3\1\36\2\3\1\37"+
    "\3\3\1\40\1\41\1\3\1\42\1\43\1\44\1\45"+
    "\1\3\1\46\1\47\1\3\1\0\2\3\1\50\3\3"+
    "\1\51\1\52\1\3\1\53\6\3\1\54\4\3\1\55"+
    "\1\3\1\56\1\3\1\57\1\60\1\61\2\3\1\62"+
    "\1\3\1\63\1\64\1\3\1\65\1\3\1\66\2\3"+
    "\1\67\1\70\1\71\1\3\1\72\1\73\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\164\0\256\0\350\0\u0122\0\u015c"+
    "\0\256\0\164\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8"+
    "\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\u0692\0\164\0\u06cc\0\164\0\164\0\164\0\164\0\164"+
    "\0\164\0\164\0\164\0\164\0\164\0\164\0\164\0\u0706"+
    "\0\350\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u020a\0\164\0\u0244"+
    "\0\u0244\0\164\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\256"+
    "\0\u094a\0\u0984\0\256\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6"+
    "\0\256\0\u0ae0\0\u0b1a\0\256\0\u0b54\0\u0b8e\0\u0bc8\0\164"+
    "\0\164\0\u0c02\0\164\0\164\0\164\0\164\0\u0c3c\0\u0740"+
    "\0\164\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\256\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\256\0\256\0\u0e0c\0\256\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\256\0\u0fa2\0\u0fdc\0\u1016\0\u1050"+
    "\0\256\0\u108a\0\256\0\u10c4\0\256\0\256\0\256\0\u10fe"+
    "\0\u1138\0\256\0\u1172\0\256\0\256\0\u11ac\0\256\0\u11e6"+
    "\0\256\0\u1220\0\u125a\0\256\0\256\0\256\0\u1294\0\256"+
    "\0\256\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\7\1\3\1\10"+
    "\2\11\1\12\1\13\2\5\1\14\1\15\1\16\1\4"+
    "\1\3\1\4\1\17\1\20\1\5\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\5\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\5\1\35\1\36\1\5\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\72\3\74\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\3\5\7\0\20\5\1\0\2\5\21\0\1\5\3\0"+
    "\1\61\1\0\1\61\4\0\1\62\62\0\1\7\1\0"+
    "\1\7\4\0\1\62\61\0\5\63\1\0\7\63\1\0"+
    "\1\63\4\0\26\63\3\0\7\63\2\0\3\63\2\0"+
    "\2\5\1\0\2\5\1\0\2\5\1\0\1\5\1\64"+
    "\1\5\7\0\20\5\1\0\2\5\21\0\1\5\20\0"+
    "\1\65\51\0\17\66\1\67\52\66\21\70\1\4\2\0"+
    "\1\71\45\70\24\0\1\72\47\0\2\5\1\0\2\5"+
    "\1\0\2\5\1\0\3\5\7\0\1\5\1\73\16\5"+
    "\1\0\2\5\21\0\1\5\2\0\2\5\1\0\2\5"+
    "\1\0\2\5\1\0\3\5\7\0\6\5\1\74\11\5"+
    "\1\0\2\5\21\0\1\5\2\0\2\5\1\0\2\5"+
    "\1\0\2\5\1\0\3\5\7\0\2\5\1\75\13\5"+
    "\1\76\1\5\1\0\2\5\21\0\1\5\2\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\3\5\7\0\5\5"+
    "\1\77\12\5\1\0\2\5\21\0\1\5\2\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\3\5\7\0\14\5"+
    "\1\100\3\5\1\0\2\5\21\0\1\5\2\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\3\5\7\0\16\5"+
    "\1\101\1\5\1\0\2\5\21\0\1\5\2\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\3\5\7\0\10\5"+
    "\1\102\1\5\1\103\5\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\1\5\1\104\3\5\1\105\6\5\1\106\3\5"+
    "\1\0\2\5\21\0\1\5\2\0\2\5\1\0\2\5"+
    "\1\0\2\5\1\0\3\5\7\0\5\5\1\107\1\110"+
    "\1\111\4\5\1\112\3\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\3\5\1\113\14\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\5\5\1\114\1\5\1\115\10\5\1\0\2\5"+
    "\21\0\1\5\2\0\2\5\1\0\2\5\1\0\2\5"+
    "\1\0\3\5\7\0\16\5\1\116\1\5\1\0\2\5"+
    "\21\0\1\5\2\0\2\5\1\0\2\5\1\0\2\5"+
    "\1\0\3\5\7\0\6\5\1\117\11\5\1\0\2\5"+
    "\21\0\1\5\45\0\1\120\4\0\1\121\21\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\3\5\7\0\1\5"+
    "\1\122\16\5\1\0\2\5\21\0\1\5\52\0\1\123"+
    "\70\0\1\124\73\0\1\125\70\0\1\126\21\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\3\5\7\0\2\5"+
    "\1\127\15\5\1\0\2\5\21\0\1\5\3\0\1\130"+
    "\1\0\1\130\73\0\1\131\64\0\2\5\1\0\2\5"+
    "\1\0\1\132\1\5\1\0\3\5\7\0\20\5\1\0"+
    "\2\5\21\0\1\5\20\65\1\133\51\65\2\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\3\5\7\0\2\5"+
    "\1\134\15\5\1\0\2\5\21\0\1\5\2\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\3\5\7\0\7\5"+
    "\1\135\10\5\1\0\2\5\21\0\1\5\2\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\3\5\7\0\11\5"+
    "\1\136\6\5\1\0\2\5\21\0\1\5\2\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\3\5\7\0\2\5"+
    "\1\137\6\5\1\140\6\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\5\5\1\141\12\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\10\5\1\142\7\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\11\5\1\143\6\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\16\5\1\144\1\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\13\5\1\145\4\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\16\5\1\146\1\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\3\5\1\147\14\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\5\5\1\150\12\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\16\5\1\151\1\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\7\5\1\152\10\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\1\153\17\5\1\0\2\5\21\0\1\5\2\0"+
    "\2\5\1\0\2\5\1\0\2\5\1\0\3\5\7\0"+
    "\17\5\1\154\1\0\2\5\21\0\1\5\2\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\3\5\7\0\15\5"+
    "\1\155\2\5\1\0\2\5\21\0\1\5\2\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\3\5\7\0\7\5"+
    "\1\156\10\5\1\0\2\5\21\0\1\5\2\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\3\5\7\0\7\5"+
    "\1\157\10\5\1\0\2\5\21\0\1\5\2\0\2\5"+
    "\1\0\1\5\1\160\1\0\2\5\1\0\3\5\7\0"+
    "\20\5\1\0\2\5\21\0\1\5\16\65\1\4\1\65"+
    "\1\133\51\65\2\0\2\5\1\0\2\5\1\0\2\5"+
    "\1\0\3\5\7\0\3\5\1\161\14\5\1\0\2\5"+
    "\21\0\1\5\2\0\2\5\1\0\2\5\1\0\2\5"+
    "\1\0\3\5\7\0\2\5\1\162\15\5\1\0\2\5"+
    "\21\0\1\5\2\0\2\5\1\0\2\5\1\0\2\5"+
    "\1\0\3\5\7\0\14\5\1\163\3\5\1\0\2\5"+
    "\21\0\1\5\2\0\2\5\1\0\2\5\1\0\2\5"+
    "\1\0\3\5\7\0\20\5\1\0\1\5\1\164\21\0"+
    "\1\5\2\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\3\5\7\0\6\5\1\165\11\5\1\0\2\5\21\0"+
    "\1\5\2\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\3\5\7\0\10\5\1\166\7\5\1\0\2\5\21\0"+
    "\1\5\2\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\3\5\7\0\12\5\1\167\5\5\1\0\2\5\21\0"+
    "\1\5\2\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\3\5\7\0\2\5\1\170\15\5\1\0\2\5\21\0"+
    "\1\5\2\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\3\5\7\0\2\5\1\171\15\5\1\0\2\5\21\0"+
    "\1\5\2\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\3\5\7\0\12\5\1\172\5\5\1\0\2\5\21\0"+
    "\1\5\2\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\3\5\7\0\10\5\1\173\7\5\1\0\2\5\21\0"+
    "\1\5\2\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\3\5\7\0\11\5\1\174\6\5\1\0\2\5\21\0"+
    "\1\5\2\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\3\5\7\0\16\5\1\175\1\5\1\0\2\5\21\0"+
    "\1\5\2\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\3\5\7\0\6\5\1\176\11\5\1\0\2\5\21\0"+
    "\1\5\2\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\3\5\7\0\10\5\1\177\7\5\1\0\2\5\21\0"+
    "\1\5\2\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\2\5\1\200\7\0\20\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\15\5\1\201\2\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\3\5\1\202\14\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\6\5\1\203\11\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\11\5\1\204\6\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\11\5\1\205\6\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\3\5"+
    "\7\0\16\5\1\206\1\5\1\0\2\5\21\0\1\5"+
    "\2\0\2\5\1\0\2\5\1\0\2\5\1\0\1\207"+
    "\2\5\7\0\20\5\1\0\2\5\21\0\1\5\2\0"+
    "\2\5\1\0\2\5\1\0\2\5\1\0\3\5\7\0"+
    "\10\5\1\210\7\5\1\0\2\5\21\0\1\5\2\0"+
    "\2\5\1\0\2\5\1\0\2\5\1\0\3\5\7\0"+
    "\6\5\1\211\11\5\1\0\2\5\21\0\1\5\2\0"+
    "\2\5\1\0\2\5\1\0\1\212\1\5\1\0\3\5"+
    "\7\0\20\5\1\0\2\5\21\0\1\5\2\0\2\5"+
    "\1\0\1\5\1\213\1\0\2\5\1\0\3\5\1\214"+
    "\6\0\20\5\1\0\2\5\21\0\1\5\2\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\1\215\2\5\7\0"+
    "\20\5\1\0\2\5\21\0\1\5\13\0\1\216\60\0"+
    "\2\5\1\0\2\5\1\0\2\5\1\0\1\5\1\217"+
    "\1\5\7\0\20\5\1\0\2\5\21\0\1\5\14\0"+
    "\1\220\57\0\2\5\1\0\2\5\1\0\1\221\1\5"+
    "\1\0\3\5\7\0\20\5\1\0\2\5\21\0\1\5"+
    "\10\0\1\222\63\0\2\5\1\0\1\5\1\223\1\0"+
    "\2\5\1\0\3\5\7\0\20\5\1\0\2\5\21\0"+
    "\1\5\6\0\1\224\65\0\2\5\1\0\2\5\1\0"+
    "\2\5\1\0\2\5\1\225\7\0\20\5\1\0\2\5"+
    "\21\0\1\5\15\0\1\226\56\0\2\5\1\0\2\5"+
    "\1\0\2\5\1\0\1\227\2\5\7\0\20\5\1\0"+
    "\2\5\21\0\1\5\13\0\1\230\60\0\2\5\1\0"+
    "\2\5\1\0\1\231\1\5\1\0\3\5\7\0\20\5"+
    "\1\0\2\5\21\0\1\5\10\0\1\232\63\0\2\5"+
    "\1\0\2\5\1\0\2\5\1\0\3\5\1\214\6\0"+
    "\20\5\1\0\2\5\21\0\1\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5742];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\5\1\1\11\27\1\1\11\1\1\14\11"+
    "\1\1\3\0\1\1\2\0\1\11\1\0\1\1\1\11"+
    "\25\1\2\11\1\1\4\11\2\1\1\11\1\1\1\0"+
    "\60\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();
  private Symbol sym(int type) { 
    return new Symbol(type, yyline, yycolumn);
  } 
  private Symbol sym(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new Error("Line " + yyline+1 + ", Column " + yycolumn);
          }
        case 61: break;
        case 2: 
          { 
          }
        case 62: break;
        case 3: 
          { return sym(sym.ID);
          }
        case 63: break;
        case 4: 
          { return sym(sym.INT_LIT);
          }
        case 64: break;
        case 5: 
          { return sym(sym.BOOL_LIT);
          }
        case 65: break;
        case 6: 
          { return sym(sym.DOT);
          }
        case 66: break;
        case 7: 
          { return sym(sym.DIV);
          }
        case 67: break;
        case 8: 
          { return sym(sym.COL);
          }
        case 68: break;
        case 9: 
          { return sym(sym.NOT);
          }
        case 69: break;
        case 10: 
          { return sym(sym.EQUALS);
          }
        case 70: break;
        case 11: 
          { return sym(sym.RANGBR);
          }
        case 71: break;
        case 12: 
          { return sym(sym.LTHAN);
          }
        case 72: break;
        case 13: 
          { return sym(sym.PLUS);
          }
        case 73: break;
        case 14: 
          { return sym(sym.MINUS);
          }
        case 74: break;
        case 15: 
          { return sym(sym.TIMES);
          }
        case 75: break;
        case 16: 
          { return sym(sym.POW);
          }
        case 76: break;
        case 17: 
          { return sym(sym.LPAREN);
          }
        case 77: break;
        case 18: 
          { return sym(sym.RPAREN);
          }
        case 78: break;
        case 19: 
          { return sym(sym.LBRACE);
          }
        case 79: break;
        case 20: 
          { return sym(sym.RBRACE);
          }
        case 80: break;
        case 21: 
          { return sym(sym.LBRACK);
          }
        case 81: break;
        case 22: 
          { return sym(sym.RBRACK);
          }
        case 82: break;
        case 23: 
          { return sym(sym.COMMA);
          }
        case 83: break;
        case 24: 
          { return sym(sym.SEMICOL);
          }
        case 84: break;
        case 25: 
          { return sym(sym.STR_LIT);
          }
        case 85: break;
        case 26: 
          { return sym(sym.OR);
          }
        case 86: break;
        case 27: 
          { return sym(sym.ENDDO);
          }
        case 87: break;
        case 28: 
          { return sym(sym.IN);
          }
        case 88: break;
        case 29: 
          { return sym(sym.IF);
          }
        case 89: break;
        case 30: 
          { return sym(sym.ENDIF);
          }
        case 90: break;
        case 31: 
          { return sym(sym.DO);
          }
        case 91: break;
        case 32: 
          { return sym(sym.CONCAT);
          }
        case 92: break;
        case 33: 
          { return sym(sym.ASSIGN);
          }
        case 93: break;
        case 34: 
          { return sym(sym.NEQUALS);
          }
        case 94: break;
        case 35: 
          { return sym(sym.AND);
          }
        case 95: break;
        case 36: 
          { return sym(sym.IMPLY);
          }
        case 96: break;
        case 37: 
          { return sym(sym.LTHANEQ);
          }
        case 97: break;
        case 38: 
          { return sym(sym.FLOAT_LIT);
          }
        case 98: break;
        case 39: 
          { return sym(sym.CHAR_LIT);
          }
        case 99: break;
        case 40: 
          { return sym(sym.RAT);
          }
        case 100: break;
        case 41: 
          { return sym(sym.LEN);
          }
        case 101: break;
        case 42: 
          { return sym(sym.INT);
          }
        case 102: break;
        case 43: 
          { return sym(sym.TOP);
          }
        case 103: break;
        case 44: 
          { return sym(sym.SEQ);
          }
        case 104: break;
        case 45: 
          { return sym(sym.CHAR);
          }
        case 105: break;
        case 46: 
          { return sym(sym.READ);
          }
        case 106: break;
        case 47: 
          { return sym(sym.BOOL);
          }
        case 107: break;
        case 48: 
          { return sym(sym.THEN);
          }
        case 108: break;
        case 49: 
          { return sym(sym.TDEF);
          }
        case 109: break;
        case 50: 
          { return sym(sym.FDEF);
          }
        case 110: break;
        case 51: 
          { return sym(sym.DICT);
          }
        case 111: break;
        case 52: 
          { return sym(sym.ELSE);
          }
        case 112: break;
        case 53: 
          { return sym(sym.MAIN);
          }
        case 113: break;
        case 54: 
          { return sym(sym.ALIAS);
          }
        case 114: break;
        case 55: 
          { return sym(sym.FLOAT);
          }
        case 115: break;
        case 56: 
          { return sym(sym.PRINT);
          }
        case 116: break;
        case 57: 
          { return sym(sym.WHILE);
          }
        case 117: break;
        case 58: 
          { return sym(sym.RET);
          }
        case 118: break;
        case 59: 
          { return sym(sym.FORALL);
          }
        case 119: break;
        case 60: 
          { return sym(sym.RAT_LIT);
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return sym(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
